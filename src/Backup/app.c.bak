#include "app.h"

#define cs_set() HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET)
#define cs_reset() HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET)
#define cs_strob() cs_reset();skip(100);cs_set();

uint16_t data[4];
uint8_t buf[4][4][4];

uint8_t cur_anim = 0;
const uint8_t anim_cnt = 2;
uint8_t anim_changed = 0;

uint8_t cooling = 0;

void button_pressed(){
  if(cooling == 0){
    cur_anim++;
    cur_anim%=anim_cnt;
    anim_changed = 1;
    cooling = 1;
  }
}

uint16_t ms = 0;

void tick(){
  if(cooling == 1){
    ms++;
    if(ms >= 500){
      cooling = 0;
      ms = 0;
    }
  }
}

uint8_t anim_delay(uint16_t ms){
  for(uint16_t i = 0; i < ms; i++){
    if(anim_changed){
      anim_changed = 0;
      return 1;
    }
    HAL_Delay(1);
  }
  return 0;
}

void anim_up(){
  clrscr();
  
  for(uint8_t z = 0;z<4;z++){
    for(uint8_t x = 0;x<4;x++){
      for(uint8_t y = 0;y<4;y++){
        buf[x][y][z] = 2;
        if(anim_delay(10))
          return;
      }
    }
  }
  
  for(uint8_t z = 0;z<4;z++){
    for(uint8_t x = 0;x<4;x++){
      for(uint8_t y = 0;y<4;y++){
        buf[x][y][z] = 0;
        if(anim_delay(10))
          return;
      }
    }
  }
}

void anim_ll(){
  for(uint8_t z = 1;z<4;z++){
    clrscr();
    for(uint8_t x = 0;x<4;x++){
      for(uint8_t y = 0;y<4;y++){
        buf[x][y][z] = 1;
      }
    }
    if(anim_delay(60))
      return;
  }
  
  for(uint8_t z = 1;z<4;z++){
    clrscr();
    for(uint8_t x = 0;x<4;x++){
      for(uint8_t y = 0;y<4;y++){
        buf[x][y][3 - z] = 1;
      }
    }
    if(anim_delay(60))
      return;
  }
}

void start_app(){
  HAL_TIM_Base_Start_IT(&htim4);
  if(SysTick_Config(SystemCoreClock / 1000) != 0)
    while(1);
  
  while(1){
    switch(cur_anim){
    case 0:
      anim_up();
      break;
    case 1:
      anim_ll();
      break;
    }
  }
}

uint16_t xy_to_word(uint8_t x,uint8_t y){
  switch(y){
  case 0:
    return 1 << (x*2);
    break;
  case 1:
    return 1 << (8 + x*2);
    break;
  case 2:
    return 1 << (1 + x*2);
    break;
  case 3:
    return 1 << (9 + x*2);
    break;
  default:
    return 0;
  }
}

void clrscr(){
  uint8_t clr[4][4][4] = {0};
  memcpy(buf, clr, 4*4*4);
}

uint8_t cur_n = 0;
uint8_t counter = 0;

void update(){
  for(uint8_t z = 0;z<4;z++){
    data[z] = 0;
    for(uint8_t x = 0;x<4;x++){
      for(uint8_t y = 0;y<4;y++){
        if ((counter % buf[x][y][z]) != 0)
          data[z] |= xy_to_word(x,y);
      }
    }
  }
}

void dyn_step(){
  update();
  transmit(cur_n);
  cur_n++;
  cur_n %= 4;
  if(cur_n == 0)
    //counter %= 0xFE;
    counter++;
}

void transmit(uint8_t n){
  uint8_t aTxBuffer;
  aTxBuffer = 1 << n;
  HAL_SPI_Transmit(&hspi1,&aTxBuffer, 1, 5000);
  aTxBuffer = data[n] & 0xFF;
  HAL_SPI_Transmit(&hspi1,&aTxBuffer, 1, 5000);
  aTxBuffer = (data[n] >> 8) & 0xFF;
  HAL_SPI_Transmit(&hspi1,&aTxBuffer, 1, 5000);
  cs_strob();
}

void skip(uint32_t n){
  for(uint32_t i = 0; i<n;i++){
    __NOP();
  }
}